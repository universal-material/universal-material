@use "sass:color";
@use "sass:map";

@use "../colors";
@use "../color-system/hct/hc";
@use "../color-system/palettes/tonal-palette";

$color-tones: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100;

$_default-neutral-color: #939094;
$_default-neutral-variant-color: #948f99;

$included-default-neutral-colors: false;

@mixin _color-vars($color-name, $color-value) {
  --u-#{$color-name}-color: #{$color-value};
  --u-#{$color-name}-color-rgb: #{color.red($color-value)},#{color.green($color-value)},#{color.blue($color-value)};
}

@mixin _text-emphasis-vars($color-name) {
  --u-on-#{$color-name}-high-emphasis-color: rgba(var(--u-on-#{$color-name}-color-rgb), var(--u-high-emphasis-opacity));
  --u-on-#{$color-name}-low-emphasis-color: rgba(var(--u-on-#{$color-name}-color-rgb), var(--u-low-emphasis-opacity));
  --u-on-#{$color-name}-lower-emphasis-color: rgba(var(--u-on-#{$color-name}-color-rgb), var(--u-lower-emphasis-opacity));
  --u-on-#{$color-name}-container-high-emphasis-color: rgba(var(--u-on-#{$color-name}-container-color-rgb), var(--u-high-emphasis-opacity));
  --u-on-#{$color-name}-container-low-emphasis-color: rgba(var(--u-on-#{$color-name}-container-color-rgb), var(--u-low-emphasis-opacity));
  --u-on-#{$color-name}-container-lower-emphasis-color: rgba(var(--u-on-#{$color-name}-container-color-rgb), var(--u-lower-emphasis-opacity));
}

@mixin _color-tones-vars($key-color, $color-name) {
  $hc: hc.from-color($key-color);

  @include _color-vars($color-name, tonal-palette.tone($hc, 40));
  @if ($color-name == primary) {
    --u-inverse-primary-color: #{tonal-palette.tone($hc, 80)};
  }

  @include _color-vars(on-#{$color-name}, tonal-palette.tone($hc, 100));
  @include _color-vars(#{$color-name}-container, tonal-palette.tone($hc, 90));
  @include _color-vars(on-#{$color-name}-container, tonal-palette.tone($hc, 10));
  @include _text-emphasis-vars($color-name);

  &.u-dark-mode,
  .u-dark-mode {

    @include _color-vars($color-name, tonal-palette.tone($hc, 80));

    @if ($color-name == primary) {
      --u-inverse-primary-color: #{tonal-palette.tone($hc, 40)};
    }

    @include _color-vars(on-#{$color-name}, tonal-palette.tone($hc, 20));
    @include _color-vars(#{$color-name}-container, tonal-palette.tone($hc, 30));
    @include _color-vars(on-#{$color-name}-container, tonal-palette.tone($hc, 90));

    @include _text-emphasis-vars($color-name);
  }
}

@mixin _include-neutral-color-dependent-vars($neutral-key-color) {
  $hc: hc.from-color($neutral-key-color);

  @include _color-vars(background, tonal-palette.tone($hc, 99));
  @include _color-vars(on-background, tonal-palette.tone($hc, 10));
  @include _color-vars(surface, tonal-palette.tone($hc, 99));
  @include _color-vars(on-surface, tonal-palette.tone($hc, 10));
  @include _color-vars(inverse-surface, tonal-palette.tone($hc, 10));
  @include _color-vars(on-inverse-surface, tonal-palette.tone($hc, 90));
  @include _color-vars(shadow, tonal-palette.tone($hc, 0));
  @include _color-vars(scrim, tonal-palette.tone($hc, 0));

  .u-dark-mode {
    @include _color-vars(background, tonal-palette.tone($hc, 10));
    @include _color-vars(on-background, tonal-palette.tone($hc, 90));
    @include _color-vars(surface, tonal-palette.tone($hc, 10));
    @include _color-vars(on-surface, tonal-palette.tone($hc, 90));
    @include _color-vars(inverse-surface, tonal-palette.tone($hc, 90));
    @include _color-vars(on-inverse-surface, tonal-palette.tone($hc, 20));
  }
}

@mixin _include-neutral-variant-color-dependent-vars($neutral-variant-key-color) {
  $hc: hc.from-color($neutral-variant-key-color);

  @include _color-vars(surface-variant, tonal-palette.tone($hc, 90));
  @include _color-vars(on-surface-variant, tonal-palette.tone($hc, 30));
  @include _color-vars(outline, tonal-palette.tone($hc, 50));
  @include _color-vars(outline-variant, tonal-palette.tone($hc, 80));

  .u-dark-mode {
    @include _color-vars(surface-variant, tonal-palette.tone($hc, 30));
    @include _color-vars(on-surface-variant, tonal-palette.tone($hc, 80));
    @include _color-vars(outline, tonal-palette.tone($hc, 60));
    @include _color-vars(outline-variant, tonal-palette.tone($hc, 30));
  }
}

@mixin _theme-colors-vars($theme-colors, $neutral-color: null, $neutral-variant-color: null) {

  @if (not $included-default-neutral-colors) {

    @if ($neutral-color == null) {
      $neutral-color: colors.$u-neutral-color;
    }

    @if ($neutral-variant-color == null) {
      $neutral-variant-color: colors.$u-neutral-variant-color;
    }
  }

  $included-default-neutral-colors: true !global;

  @each $color-name, $key-color in $theme-colors {
    @include _color-tones-vars($key-color, $color-name);
  }

  @if ($neutral-color != null) {
    @include _include-neutral-color-dependent-vars($neutral-color);
  }

  @if ($neutral-variant-color != null) {
    @include _include-neutral-variant-color-dependent-vars($neutral-variant-color);
  }
}

@mixin theme($theme-colors, $neutral-color: null, $neutral-variant-color: null) {

  @if & {
    @include _theme-colors-vars($theme-colors, $neutral-color, $neutral-variant-color);
  } @else {
    :root {
      @include _theme-colors-vars($theme-colors, $neutral-color, $neutral-variant-color);
    }
  }
}
