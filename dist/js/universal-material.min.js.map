{"version":3,"sources":["ripple.ts","snackbar.ts","text-field.ts"],"names":["SnackbarDuration","RippleContainersSelector","join","Ripple","element","_this","this","window","getComputedStyle","position","style","isTouching","addEventListener","e","createRipple","clientX","clientY","setTimeout","touches","prototype","rippleContainer","releaseEventName","releaseCallback","pageX","pageY","rippleWrapper","document","createElement","classList","add","ripple","appendChild","insertAdjacentElement","release","contains","removeChild","removeEventListener","requestAnimationFrame","clientRect","getBoundingClientRect","rippleSize","Math","max","clientWidth","clientHeight","width","height","marginLeft","marginTop","transitionDuration","pow","x","left","y","top","transformOrigin","initializeRipples","rippleContainers","querySelectorAll","i","length","Snackbar","show","text","duration","buttonDefinition","long","snackbarQueue","push","consuming","consumeQueue","showNext","snackbarDefinition","slice","snackbar_1","createSnackbar","createSnackbarText","snackbarButton","createButton","body","addAnimationEndEvents","snackbar","className","snackbarText","innerText","type","action","animationEvents","forEach","eventName","onAnimationEnd","bind","event","currentTarget","parentNode","SnackbarDefinition","SnackbarButtonDefinition","TextField","input","querySelector","remove","setEmpty","focus","value","initializeTextFields","textFields"],"mappings":"AAAA,ICoGKA,iBDpGCC,yBACJ,CACE,OACA,YACA,kBACA,aACA,cACA,eACA,yBACA,8BACA,OACA,iBACA,4BACA,+BACA,2BACA,eACA,eACAC,KAAK,KAETC,OAAA,WAEI,SAAAA,EAAYC,GAAZ,IAAAC,EAAAC,KACsD,aAA9CC,OAAOC,iBAAiBJ,GAASK,UAAyE,UAA9CF,OAAOC,iBAAiBJ,GAASK,WAC7FL,EAAQM,MAAMD,SAAW,YAG7B,IAAIE,GAAa,EAEjBP,EAAQQ,iBAAiB,YAAa,SAACC,GAC9BF,GACDN,EAAKS,aAAaV,EAAS,UAAW,KAAMS,EAAEE,QAASF,EAAEG,WAIjEZ,EAAQQ,iBAAiB,aAAc,SAACC,GACpCF,GAAa,EACbN,EAAKS,aAAaV,EAAS,WAAY,WACnCa,WAAW,WACPN,GAAa,GACd,MACJE,EAAEK,QAAQ,GAAGH,QAASF,EAAEK,QAAQ,GAAGF,WA0DlD,OAtDIb,EAAAgB,UAAAL,aAAA,SAAaM,EAA0BC,EAA0BC,EAA2BC,EAAeC,GACvG,IAAMC,EAAgBC,SAASC,cAAc,OAC7CF,EAAcG,UAAUC,IAAI,kBAE5B,IAAMC,EAASJ,SAASC,cAAc,OACtCG,EAAOF,UAAUC,IAAI,UACrBJ,EAAcM,YAAYD,GAC1BV,EAAgBY,sBAAsB,aAAcP,GAEpD,IAAMQ,EAAU,WACZH,EAAOF,UAAUC,IAAI,WAEjBP,GACAA,KAIRf,OAAOK,iBAAiBS,EAAkBY,GAC1Cb,EAAgBR,iBAAiB,WAAYqB,GAE7CH,EAAOlB,iBAAiB,gBAAiB,WACjCkB,EAAOF,UAAUM,SAAS,aAC1Bd,EAAgBe,YAAYV,GAC5BL,EAAgBgB,oBAAoB,WAAYH,GAChD1B,OAAO6B,oBAAoBf,EAAkBY,MAIrDI,sBAAsB,WAClB,IAAMC,EAAalB,EAAgBmB,wBAE/BC,EAAoC,EADXC,KAAKC,IAAIjB,EAAckB,YAAalB,EAAcmB,cAE/Ed,EAAOpB,MAAMmC,MAAQL,EAAa,KAClCV,EAAOpB,MAAMoC,OAASN,EAAa,KACnCV,EAAOpB,MAAMqC,YAAcP,EAAa,EAAI,KAC5CV,EAAOpB,MAAMsC,WAAaR,EAAa,EAAI,KAC3CV,EAAOpB,MAAMuC,mBAAsB,KAAOR,KAAKS,IAAIV,EAAW,IAAQ,YAEtE,IAAMW,EAAK5B,EAAQe,EAAWc,MAAUZ,EAAapB,EAAgBuB,aAAe,EAC9EU,EAAK7B,EAAQc,EAAWgB,KAASd,EAAapB,EAAgBwB,cAAgB,EAEpFd,EAAOpB,MAAM6C,gBAAkBJ,EAAI,MAAQE,EAAI,KAC/CvB,EAAOF,UAAUC,IAAI,WAItB1B,EAAAqD,kBAAP,WAGI,IAFA,IAAMC,EAAmB/B,SAASgC,iBAAiBzD,0BAE1C0D,EAAI,EAAGA,EAAIF,EAAiBG,OAAQD,IACzC,IAAIxD,EAAOsD,EAAiBE,KAIxCxD,EA/EA,GCjBA0D,SAAA,WAAA,SAAAA,KAgGA,OA3FSA,EAAAC,KAAP,SAAYC,EAAcC,EAAoDC,QAApD,IAAAD,IAAAA,EAA6BhE,iBAAiBkE,MACtEL,EAASM,cAAcC,KAAK,CAC1BL,KAAMA,EACNC,SAAUA,EACVC,iBAAkBA,IAGfJ,EAASQ,WACZR,EAASS,gBAIET,EAAAS,aAAf,WAEMT,EAASM,cAAcP,SACzBC,EAASQ,WAAY,EACrBR,EAASU,aAIEV,EAAAU,SAAf,WACE,GAAIV,EAASM,cAAcP,OAAQ,CACjC,IAAMY,EAAqBX,EAASM,cAAc,GAElDN,EAASM,cAAgBN,EAASM,cAAcM,MAAM,GAEtD,IAAMC,EAAWb,EAASc,iBAI1B,GAFAD,EAAS3C,YAAY8B,EAASe,mBAAmBJ,EAAmBT,OAEhES,EAAmBP,iBAAkB,CACvC,IAAMY,EAAiBhB,EAASiB,aAAaN,EAAmBP,kBAChES,EAAS3C,YAAY8C,GAGvBnD,SAASqD,KAAKhD,YAAY2C,GAE1BzD,WAAW,WACTyD,EAAS9C,UAAUC,IAAI,WACvBgC,EAASmB,sBAAsBN,IAE9BF,EAAmBR,eAEtBH,EAASQ,WAAY,GAIVR,EAAAc,eAAf,WACE,IAAMM,EAAWvD,SAASC,cAAc,OAGxC,OAFAsD,EAASC,UAAY,WAEdD,GAGMpB,EAAAe,mBAAf,SAAkCb,GAChC,IAAMoB,EAAezD,SAASC,cAAc,OAI5C,OAHAwD,EAAaC,UAAYrB,EACzBoB,EAAaD,UAAY,gBAElBC,GAGMtB,EAAAiB,aAAf,SAA4Bb,GAE1B,IAAMY,EAAiBnD,SAASC,cAAc,UAW9C,OAVAkD,EAAeQ,KAAO,SACtBR,EAAeK,UAAY,yBAC3BL,EAAeO,UAAYnB,EAAiBF,KAE5C,IAAI5D,OAAO0E,GAEPZ,EAAiBqB,QACnBT,EAAejE,iBAAiB,QAASqD,EAAiBqB,QAGrDT,GAGMhB,EAAAmB,sBAAf,SAAqCC,GAArC,IAAA5E,EAAAC,KACEuD,EAAS0B,gBAAgBC,QAAQ,SAAAC,GAC/BR,EAASrE,iBAAiB6E,EAAW5B,EAAS6B,eAAeC,KAAKtF,OAIvDwD,EAAA6B,eAAf,SAA8BE,GAC5BA,EAAMC,cAAczD,oBAAoBwD,EAAMP,KAAMxB,EAAS6B,gBAC7D,IAAMtF,EAAUwF,EAAMC,cAEtBzF,EAAQ0F,WAAW3D,YAAY/B,GAC/ByD,EAASU,YA7FaV,EAAA0B,gBAAkB,CAAC,qBAAsB,gBAAiB,iBAAkB,gBACrF1B,EAAAM,cAAsC,GA8FvDN,EAhGA,IAkGA,SAAK7D,GACHA,EAAAA,EAAA,MAAA,MAAA,QACAA,EAAAA,EAAA,KAAA,KAAA,OAFF,CAAKA,mBAAAA,iBAAgB,KAKrB,IAAA+F,mBAAA,aAMAC,yBAAA,aC/GAC,UAAA,WAKI,SAAAA,EAAY7F,GAAZ,IAAAC,EAAAC,KACU4F,EAAQ9F,EAAQ+F,cAAc,mBAEhCD,IACAA,EAAMtF,iBAAiB,QAAS,WAC5BR,EAAQwB,UAAUC,IAAI,WAG1BqE,EAAMtF,iBAAiB,OAAQ,WAC3BR,EAAQwB,UAAUwE,OAAO,WAG7BF,EAAMtF,iBAAiB,QAAS,WAC5BP,EAAKgG,aAGTjG,EAAQQ,iBAAiB,QAAS,WAC9BsF,EAAMI,UAGVhG,KAAK4F,MAAQA,EACb5F,KAAKF,QAAUA,EAEfE,KAAK+F,YAmBjB,OAfIJ,EAAA9E,UAAAkF,SAAA,WACQ/F,KAAK4F,MAAMK,MACXjG,KAAKF,QAAQwB,UAAUwE,OAAO,SAE9B9F,KAAKF,QAAQwB,UAAUC,IAAI,UAI5BoE,EAAAO,qBAAP,WAEI,IADA,IAAMC,EAAa/E,SAASgC,iBAAiB,eACpCC,EAAI,EAAGA,EAAI8C,EAAW7C,OAAQD,IAAK,CAExC,IAAIsC,EADcQ,EAAW9C,MAIzCsC,EA/CA","file":"universal-material.min.js","sourcesContent":["const RippleContainersSelector =\r\n  [\r\n    '.btn',\r\n    '.btn-flat',\r\n    '.btn-borderless',\r\n    '.btn-solid',\r\n    '.btn-raised',\r\n    '.btn-outline',\r\n    '.list-hover .list-item',\r\n    '.list-item .list-item-hover',\r\n    '.tab',\r\n    '.dropdown-item',\r\n    '.radio .selection-control',\r\n    '.checkbox .selection-control',\r\n    '.switch .check-indicator',\r\n    '.chip-remove',\r\n    '.chip-hover'\r\n  ].join(',');\r\n\r\nclass Ripple {\r\n\r\n    constructor(element: HTMLElement) {\r\n        if (window.getComputedStyle(element).position !== \"absolute\" && window.getComputedStyle(element).position !== \"fixed\") {\r\n            element.style.position = \"relative\";\r\n        }\r\n\r\n        let isTouching = false;\r\n\r\n        element.addEventListener('mousedown', (e: MouseEvent) => {\r\n            if (!isTouching) {\r\n                this.createRipple(element, 'mouseup', null, e.clientX, e.clientY);\r\n            }\r\n        });\r\n\r\n        element.addEventListener('touchstart', (e: TouchEvent) => {\r\n            isTouching = true;\r\n            this.createRipple(element, 'touchend', () => {\r\n                setTimeout(() => {\r\n                    isTouching = false;\r\n                }, 100);\r\n            }, e.touches[0].clientX, e.touches[0].clientY);\r\n        });\r\n    }\r\n\r\n    createRipple(rippleContainer: Element, releaseEventName: string, releaseCallback: Function, pageX: number, pageY: number) {\r\n        const rippleWrapper = document.createElement('DIV');\r\n        rippleWrapper.classList.add('ripple-wrapper');\r\n\r\n        const ripple = document.createElement('DIV');\r\n        ripple.classList.add('ripple');\r\n        rippleWrapper.appendChild(ripple);\r\n        rippleContainer.insertAdjacentElement('afterbegin', rippleWrapper);\r\n\r\n        const release = function () {\r\n            ripple.classList.add('dismiss');\r\n\r\n            if (releaseCallback) {\r\n                releaseCallback();\r\n            }\r\n        };\r\n\r\n        window.addEventListener(releaseEventName, release);\r\n        rippleContainer.addEventListener(\"dragover\", release);\r\n\r\n        ripple.addEventListener('transitionend', () => {\r\n            if (ripple.classList.contains('dismiss')) {\r\n                rippleContainer.removeChild(rippleWrapper);\r\n                rippleContainer.removeEventListener(\"dragover\", release);\r\n                window.removeEventListener(releaseEventName, release)\r\n            }\r\n        });\r\n\r\n        requestAnimationFrame(() => {\r\n            const clientRect = rippleContainer.getBoundingClientRect();\r\n            const largestDimensionSize = Math.max(rippleWrapper.clientWidth, rippleWrapper.clientHeight);\r\n            let rippleSize = largestDimensionSize * 2;\r\n            ripple.style.width = rippleSize + 'px';\r\n            ripple.style.height = rippleSize + 'px';\r\n            ripple.style.marginLeft = -rippleSize / 2 + 'px';\r\n            ripple.style.marginTop = -rippleSize / 2 + 'px';\r\n            ripple.style.transitionDuration = (1080 * Math.pow(rippleSize,0.3)) + 'ms, 750ms';\r\n\r\n            const x = (pageX - clientRect.left) + ((rippleSize - rippleContainer.clientWidth) / 2);\r\n            const y = (pageY - clientRect.top) + ((rippleSize - rippleContainer.clientHeight) / 2);\r\n\r\n            ripple.style.transformOrigin = x + \"px \" + y + \"px\";\r\n            ripple.classList.add('show');\r\n        });\r\n    }\r\n\r\n    static initializeRipples(): void {\r\n        const rippleContainers = document.querySelectorAll(RippleContainersSelector);\r\n\r\n        for (let i = 0; i < rippleContainers.length; i++) {\r\n            new Ripple(rippleContainers[i] as HTMLElement);\r\n\r\n        }\r\n    }\r\n}\r\n","\r\n\r\nclass Snackbar {\r\n  private static readonly animationEvents = [\"webkitAnimationEnd\", \"oanimationend\", \"msAnimationEnd\", \"animationend\"];\r\n  private static snackbarQueue: SnackbarDefinition[] = [];\r\n  private static consuming: boolean;\r\n\r\n  static show(text: string, duration: SnackbarDuration = SnackbarDuration.long, buttonDefinition?: SnackbarButtonDefinition) {\r\n    Snackbar.snackbarQueue.push({\r\n      text: text,\r\n      duration: duration,\r\n      buttonDefinition: buttonDefinition\r\n    });\r\n\r\n    if (!Snackbar.consuming) {\r\n      Snackbar.consumeQueue();\r\n    }\r\n  }\r\n\r\n  private static consumeQueue() {\r\n\r\n    if (Snackbar.snackbarQueue.length) {\r\n      Snackbar.consuming = true;\r\n      Snackbar.showNext();\r\n    }\r\n  }\r\n\r\n  private static showNext() {\r\n    if (Snackbar.snackbarQueue.length) {\r\n      const snackbarDefinition = Snackbar.snackbarQueue[0];\r\n\r\n      Snackbar.snackbarQueue = Snackbar.snackbarQueue.slice(1);\r\n\r\n      const snackbar = Snackbar.createSnackbar();\r\n\r\n      snackbar.appendChild(Snackbar.createSnackbarText(snackbarDefinition.text));\r\n\r\n      if (snackbarDefinition.buttonDefinition) {\r\n        const snackbarButton = Snackbar.createButton(snackbarDefinition.buttonDefinition);\r\n        snackbar.appendChild(snackbarButton);\r\n      }\r\n\r\n      document.body.appendChild(snackbar);\r\n\r\n      setTimeout(() => {\r\n        snackbar.classList.add(\"dismiss\");\r\n        Snackbar.addAnimationEndEvents(snackbar);\r\n\r\n      }, snackbarDefinition.duration);\r\n    } else {\r\n      Snackbar.consuming = false;\r\n    }\r\n  }\r\n\r\n  private static createSnackbar(): HTMLElement {\r\n    const snackbar = document.createElement(\"div\");\r\n    snackbar.className = \"snackbar\";\r\n\r\n    return snackbar;\r\n  }\r\n\r\n  private static createSnackbarText(text: string): HTMLElement {\r\n    const snackbarText = document.createElement(\"div\");\r\n    snackbarText.innerText = text;\r\n    snackbarText.className = \"snackbar-text\";\r\n\r\n    return snackbarText;\r\n  }\r\n\r\n  private static createButton(buttonDefinition: SnackbarButtonDefinition): HTMLElement {\r\n\r\n    const snackbarButton = document.createElement(\"button\") as HTMLButtonElement;\r\n    snackbarButton.type = \"button\";\r\n    snackbarButton.className = \"btn-flat btn-secondary\";\r\n    snackbarButton.innerText = buttonDefinition.text;\r\n\r\n    new Ripple(snackbarButton);\r\n\r\n    if (buttonDefinition.action) {\r\n      snackbarButton.addEventListener(\"click\", buttonDefinition.action);\r\n    }\r\n\r\n    return snackbarButton;\r\n  }\r\n\r\n  private static addAnimationEndEvents(snackbar: HTMLElement) {\r\n    Snackbar.animationEvents.forEach(eventName => {\r\n      snackbar.addEventListener(eventName, Snackbar.onAnimationEnd.bind(this));\r\n    });\r\n  }\r\n\r\n  private static onAnimationEnd(event: Event) {\r\n    event.currentTarget.removeEventListener(event.type, Snackbar.onAnimationEnd);\r\n    const element = event.currentTarget as HTMLElement;\r\n\r\n    element.parentNode.removeChild(element);\r\n    Snackbar.showNext();\r\n  }\r\n}\r\n\r\nenum SnackbarDuration {\r\n  short = 2500,\r\n  long = 5000\r\n}\r\n\r\nclass SnackbarDefinition {\r\n  text: string;\r\n  duration: SnackbarDuration;\r\n  buttonDefinition: SnackbarButtonDefinition;\r\n}\r\n\r\nclass SnackbarButtonDefinition {\r\n  text: string;\r\n  action: EventListener;\r\n}\r\n","class TextField {\r\n\r\n    element: Element;\r\n    input: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n    constructor(element: Element) {\r\n        const input = element.querySelector('input, textarea') as HTMLInputElement | HTMLTextAreaElement;\r\n\r\n        if (input) {\r\n            input.addEventListener('focus', () => {\r\n                element.classList.add('focus');\r\n            });\r\n\r\n            input.addEventListener('blur', () => {\r\n                element.classList.remove('focus');\r\n            });\r\n\r\n            input.addEventListener('input', () => {\r\n                this.setEmpty();\r\n            });\r\n\r\n            element.addEventListener('click', () => {\r\n                input.focus();\r\n            });\r\n\r\n            this.input = input;\r\n            this.element = element;\r\n\r\n            this.setEmpty();\r\n        }\r\n    }\r\n\r\n    setEmpty() {\r\n        if (this.input.value) {\r\n            this.element.classList.remove('empty')\r\n        } else {\r\n            this.element.classList.add('empty')\r\n        }\r\n    }\r\n\r\n    static initializeTextFields(): void {\r\n        const textFields = document.querySelectorAll('.text-field');\r\n        for (let i = 0; i < textFields.length; i++) {\r\n            const textField = textFields[i];\r\n            new TextField(textField);\r\n        }\r\n    }\r\n}\r\n"]}