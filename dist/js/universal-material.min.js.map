{"version":3,"sources":["quick-dialog.ts","confirm-dialog.ts","custom-event.polyfill.ts","dialog.ts","progress-dialog.ts","ripple.ts","snackbar.ts","text-field.ts"],"names":["umd","QuickDialogConfig","default","closeOnBackdropClick","closeOnEsc","QuickDialog","template","config","beforeCreateDialog","_this","this","_keyDownEvent","event","which","_innerDialog","close","preventDefault","_template","_config","__assign","_createDialog","prototype","dialogContainer","document","createElement","innerHTML","dialogElement","querySelector","_configureDialog","body","appendChild","addEventListener","removeChild","removeEventListener","_onClosed","Dialog","attach","destroyWhenClose","_setEscapeEvent","ConfirmDialogConfig","_super","__extends","confirmLabel","cancelLabel","ConfirmDialog","message","call","_message","open","titleElement","title","innerText","parentNode","confirmButton","cancelButton","Ripple","onConfirm","onCancel","CustomEvent","params","bubbles","cancelable","detail","undefined","evt","createEvent","initCustomEvent","window","DialogConfig","closedEvent","dialogBodyTopDividerClassName","dialogBodyBottomDividerClassName","_dialogElement","dialogConfig","onAnimationEnd","type","dispatchEvent","_dialogConfig","classList","remove","_dialogBodyElement","_setBodyDividers","_setDialogBodyScrollHandler","addAnimationEndEvents","_animationEvents","forEach","eventName","bind","element","add","scrollTop","offsetHeight","scrollHeight","ProgressDialogConfig","ProgressDialog","style","display","RippleContainersSelector","join","RippleConfig","roundClickableConfig","size","borderRadius","RippleConfigMap","selector","subSelector","disabled","getComputedStyle","position","isTouching","e","createRipple","clientX","clientY","setTimeout","touches","rippleContainer","releaseEventName","releaseCallback","pageX","pageY","rippleWrapper","ripple","insertAdjacentElement","_setElementSquareSizeAndCenter","release","contains","requestAnimationFrame","clientRect","getBoundingClientRect","largestDimensionSize","Math","max","clientWidth","clientHeight","rippleSize","transitionDuration","pow","x","left","y","top","transformOrigin","width","height","marginLeft","marginTop","_initilizeRipples","rippleContainers","querySelectorAll","i","length","initializeRipples","rippleConfig","SnackbarDuration","Snackbar","show","text","duration","buttonDefinition","long","_snackbarQueue","push","_consuming","consumeQueue","showNext","snackbarDefinition","slice","snackbar_1","createSnackbar","createSnackbarText","snackbarButton","createButton","snackbar","className","snackbarText","action","currentTarget","SnackbarDefinition","SnackbarButtonDefinition","TextField","input","nodeName","toLowerCase","HTMLInputElement","HTMLTextAreaElement","setEmpty","descriptor_1","Object","getOwnPropertyDescriptor","inputSetter_1","set","val","defineProperty","value","initializeTextFields","textFields"],"mappings":"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","file":"universal-material.min.js","sourcesContent":["\r\n\r\nconst EscapeKeyCode = 27;\r\n\r\nexport class QuickDialogConfig {\r\n  static default: QuickDialogConfig = {\r\n    closeOnBackdropClick: true,\r\n    closeOnEsc: true\r\n  };\r\n\r\n  closeOnBackdropClick?: boolean;\r\n  closeOnEsc?: boolean;\r\n}\r\n\r\nexport abstract class QuickDialog<T extends QuickDialogConfig> {\r\n  private readonly _template: string;\r\n  protected _config: T;\r\n  protected _innerDialog: Dialog;\r\n\r\n  protected constructor(template: string, config?: any, beforeCreateDialog?: Function) {\r\n    this._template = template;\r\n    this._config = {...QuickDialogConfig.default, ...config};\r\n    if (beforeCreateDialog) beforeCreateDialog();\r\n    this._createDialog();\r\n  }\r\n\r\n  private _keyDownEvent = (event: KeyboardEvent) => {\r\n    if (event.which === EscapeKeyCode) {\r\n      this._innerDialog.close();\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  private _createDialog() {\r\n    const dialogContainer = document.createElement('div');\r\n    dialogContainer.innerHTML = this._template;\r\n\r\n    const dialogElement = dialogContainer.querySelector<HTMLElement>('.dialog');\r\n    this._configureDialog(dialogElement);\r\n\r\n    document.body.appendChild(dialogContainer);\r\n\r\n    dialogElement.addEventListener('closed', () => {\r\n      document.body.removeChild(dialogContainer);\r\n      document.body.removeEventListener('keydown', this._keyDownEvent, true);\r\n      this._onClosed();\r\n    });\r\n\r\n    this._innerDialog = Dialog.attach(dialogElement, {\r\n      destroyWhenClose: true\r\n    });\r\n\r\n    if (this._config.closeOnEsc) {\r\n      this._setEscapeEvent();\r\n    }\r\n\r\n    if (this._config.closeOnBackdropClick) {\r\n      dialogElement\r\n        .querySelector('.dialog-backdrop')\r\n        .addEventListener('click', () => this._innerDialog.close(), true);\r\n    }\r\n  }\r\n\r\n  protected abstract _configureDialog(dialogElement: HTMLElement): void;\r\n\r\n  close(): void {\r\n    this._innerDialog.close();\r\n  }\r\n\r\n  protected _onClosed() {\r\n\r\n  }\r\n\r\n  private _setEscapeEvent() {\r\n    document.body.addEventListener('keydown', this._keyDownEvent, true);\r\n  }\r\n}\r\n","\r\n\r\n\r\nexport class ConfirmDialogConfig extends QuickDialogConfig {\r\n  static readonly default: ConfirmDialogConfig = {\r\n    confirmLabel: \"Ok\",\r\n    cancelLabel: \"Cancel\",\r\n    ...QuickDialogConfig.default\r\n  };\r\n\r\n  onConfirm?: Function;\r\n  onCancel?: Function;\r\n  title?: string;\r\n  confirmLabel?: string;\r\n  cancelLabel?: string;\r\n}\r\n\r\nconst confirmDialogTemplate = `\r\n<div class=\"dialog show\">\r\n  <div class=\"dialog-backdrop\"></div>\r\n  <div class=\"dialog-content\">\r\n    <div class=\"dialog-title\"></div>\r\n    <div class=\"dialog-body\"></div>\r\n    <div class=\"dialog-actions\">\r\n      <button type=\"button\" class=\"btn-flat btn-primary\" cancelButton></button>\r\n      <button type=\"button\" class=\"btn-flat btn-primary\" confirmButton></button>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n\r\nexport class ConfirmDialog extends QuickDialog<ConfirmDialogConfig> {\r\n\r\n  private readonly _message: string;\r\n\r\n  static open(message: string, config?: ConfirmDialogConfig): ConfirmDialog {\r\n    return new ConfirmDialog(message, config);\r\n  }\r\n\r\n  constructor(message: string, config?: ConfirmDialogConfig) {\r\n    super(confirmDialogTemplate, {...ConfirmDialogConfig.default, _message: message, ...config});\r\n\r\n    this._message = message;\r\n  }\r\n\r\n  protected  _configureDialog(dialogElement: HTMLElement): void {\r\n    const titleElement = dialogElement.querySelector<HTMLElement>('.dialog-title');\r\n\r\n    if (this._config.title) {\r\n      titleElement.innerText = this._config.title;\r\n    } else {\r\n      titleElement.parentNode.removeChild(titleElement);\r\n    }\r\n    dialogElement.querySelector<HTMLElement>('.dialog-body').innerText = this._config['_message'];\r\n\r\n    const confirmButton = dialogElement.querySelector<HTMLElement>('[confirmButton]');\r\n    const cancelButton = dialogElement.querySelector<HTMLElement>('[cancelButton]');\r\n\r\n    confirmButton.innerText = this._config.confirmLabel;\r\n    cancelButton.innerText = this._config.cancelLabel;\r\n\r\n    Ripple.attach(confirmButton);\r\n    Ripple.attach(cancelButton);\r\n\r\n    confirmButton.addEventListener('click', () => {\r\n      this._innerDialog.close();\r\n      if (this._config.onConfirm) this._config.onConfirm();\r\n    });\r\n\r\n    cancelButton.addEventListener('click', () => {\r\n      this._innerDialog.close();\r\n      if (this._config.onCancel) this._config.onCancel();\r\n    });\r\n  }\r\n}\r\n","(function () {\r\n  if (typeof window['CustomEvent'] === \"function\") return;\r\n\r\n  function CustomEvent(event: string, params: any) {\r\n    params = params || {bubbles: false, cancelable: false, detail: undefined};\r\n    let evt = document.createEvent('CustomEvent');\r\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n    return evt;\r\n  }\r\n\r\n  CustomEvent.prototype = window['Event'].prototype;\r\n\r\n  window['CustomEvent'] = CustomEvent;\r\n})();\r\n","export class DialogConfig {\r\n  static readonly default: DialogConfig = {\r\n    destroyWhenClose: false\r\n  };\r\n\r\n  destroyWhenClose?: boolean\r\n}\r\n\r\nconst closedEvent = new CustomEvent('closed');\r\nconst dialogBodyTopDividerClassName = 'dialog-body-top-divider';\r\nconst dialogBodyBottomDividerClassName = 'dialog-body-bottom-divider';\r\n\r\nexport class Dialog {\r\n  private static readonly _animationEvents = [\"webkitAnimationEnd\", \"oanimationend\", \"msAnimationEnd\", \"animationend\"];\r\n  private readonly _dialogConfig: DialogConfig;\r\n  private readonly _dialogBodyElement: HTMLElement;\r\n\r\n  constructor(private readonly _dialogElement: HTMLElement,\r\n              dialogConfig: DialogConfig) {\r\n    this._dialogConfig = {...DialogConfig.default, ...dialogConfig};\r\n    this._dialogBodyElement = this._dialogElement.querySelector<HTMLElement>('.dialog-body');\r\n\r\n    if (this._dialogBodyElement) {\r\n      this._setBodyDividers();\r\n      this._setDialogBodyScrollHandler();\r\n    }\r\n  }\r\n\r\n  private addAnimationEndEvents() {\r\n    Dialog._animationEvents.forEach(eventName => {\r\n      this._dialogElement.addEventListener(eventName, this.onAnimationEnd.bind(this));\r\n    });\r\n  }\r\n\r\n  private onAnimationEnd = (event: Event) => {\r\n    this._dialogElement.removeEventListener(event.type, this.onAnimationEnd);\r\n    this._dialogElement.dispatchEvent(closedEvent);\r\n\r\n    if (this._dialogConfig.destroyWhenClose) {\r\n      this._dialogElement.parentNode.removeChild(this._dialogElement);\r\n    } else {\r\n      this._dialogElement.classList.remove('hide');\r\n    }\r\n  };\r\n\r\n  static attach(element: HTMLElement, dialogConfig?: DialogConfig): Dialog {\r\n    return new Dialog(element, dialogConfig);\r\n  }\r\n\r\n  open() {\r\n    this._dialogElement.classList.add('show');\r\n  }\r\n\r\n  close() {\r\n    this._dialogElement.classList.add('hide');\r\n    this._dialogElement.classList.remove('show');\r\n    this.addAnimationEndEvents();\r\n  }\r\n\r\n  private _setBodyDividers() {\r\n    if(this._dialogBodyElement.scrollTop) {\r\n      this._dialogElement.classList.add(dialogBodyTopDividerClassName);\r\n    } else {\r\n      this._dialogElement.classList.remove(dialogBodyTopDividerClassName);\r\n    }\r\n\r\n    const scrollBottom = this._dialogBodyElement.scrollTop + this._dialogBodyElement.offsetHeight;\r\n\r\n    if (scrollBottom !== this._dialogBodyElement.scrollHeight) {\r\n      this._dialogElement.classList.add(dialogBodyBottomDividerClassName);\r\n    } else {\r\n      this._dialogElement.classList.remove(dialogBodyBottomDividerClassName);\r\n    }\r\n  }\r\n\r\n  private _setDialogBodyScrollHandler() {\r\n    this._dialogBodyElement.addEventListener('scroll', this._setBodyDividers.bind(this), true);\r\n  }\r\n}\r\n","\r\n\r\nexport class ProgressDialogConfig extends QuickDialogConfig {\r\n  static readonly default: ProgressDialogConfig = {\r\n    ...QuickDialogConfig.default,\r\n    closeOnBackdropClick: false,\r\n    closeOnEsc: false\r\n  };\r\n}\r\n\r\nconst progressDialogTemplate = `\r\n<div class=\"dialog dialog-progress show\">\r\n  <div class=\"dialog-backdrop\"></div>\r\n  <div class=\"dialog-content\">\r\n    <div class=\"dialog-body\">\r\n      <div class=\"preloader-wrapper\">\r\n        <div class=\"spinner-layer\">\r\n          <div class=\"circle-clipper left\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n          <div class=\"gap-patch\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n          <div class=\"circle-clipper right\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"dialog-progress-message headline6 text-low-contrast text-nowrap\"></div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n\r\nexport class ProgressDialog extends QuickDialog<ProgressDialogConfig> {\r\n\r\n  private readonly _message: string;\r\n\r\n  static open(message: string, config?: ProgressDialogConfig): ProgressDialog {\r\n    return new ProgressDialog(message, config);\r\n  }\r\n\r\n  constructor(message: string, config?: ProgressDialogConfig) {\r\n    super(progressDialogTemplate, {...ProgressDialogConfig.default, _message: message, ...config});\r\n\r\n    this._message = message;\r\n  }\r\n\r\n  protected  _configureDialog(dialogElement: HTMLElement): void {\r\n    const message = this._config['_message'];\r\n\r\n    if (message) {\r\n      dialogElement.querySelector<HTMLElement>('.dialog-progress-message').innerText = message;\r\n    } else {\r\n      dialogElement.querySelector<HTMLElement>('.dialog-progress-message').style.display = 'none';\r\n    }\r\n  }\r\n}\r\n","export const RippleContainersSelector =\r\n  [\r\n    '.btn',\r\n    '.btn-flat',\r\n    '.btn-solid',\r\n    '.btn-raised',\r\n    '.btn-outline',\r\n    '.btn-floating',\r\n    '.tab',\r\n    '.dropdown-item',\r\n    '.chip-remove',\r\n    '.chip-hover'\r\n  ].join(',');\r\n\r\nexport class RippleConfig {\r\n  size?: number;\r\n  borderRadius?: string;\r\n}\r\n\r\nconst roundClickableConfig = {\r\n  size: 40,\r\n  borderRadius: '50%'\r\n};\r\n\r\nexport const RippleConfigMap = [\r\n  {\r\n    selector: '.list-hover',\r\n    subSelector: '.list-item',\r\n    config: null\r\n  },\r\n  {\r\n    selector: '.list-item',\r\n    subSelector: '.list-item-hover',\r\n    config: null\r\n  },\r\n  {\r\n    selector: '.radio',\r\n    subSelector: '.selection-control',\r\n    config: null\r\n  },\r\n  {\r\n    selector: '.switch',\r\n    subSelector: '.check-indicator',\r\n    config: null\r\n  },\r\n  {\r\n    selector: '.checkbox',\r\n    subSelector: '.selection-control',\r\n    config: roundClickableConfig\r\n  },\r\n  {\r\n    selector: '.btn-borderless',\r\n    config: roundClickableConfig\r\n  }\r\n];\r\n\r\nexport class Ripple {\r\n  private readonly _config: RippleConfig;\r\n  disabled = false;\r\n\r\n  static attach(element: HTMLElement, config?: RippleConfig): Ripple {\r\n    return new Ripple(element, config);\r\n  }\r\n\r\n  constructor(element: HTMLElement, config?: RippleConfig) {\r\n    this._config = {...config};\r\n\r\n    if (window.getComputedStyle(element).position !== \"absolute\" && window.getComputedStyle(element).position !== \"fixed\") {\r\n      element.style.position = \"relative\";\r\n    }\r\n\r\n    let isTouching = false;\r\n\r\n    element.addEventListener('mousedown', (e: MouseEvent) => {\r\n      if (!isTouching) {\r\n        this.createRipple(element, 'mouseup', null, e.clientX, e.clientY);\r\n      }\r\n    });\r\n\r\n    element.addEventListener('touchstart', (e: TouchEvent) => {\r\n      isTouching = true;\r\n      this.createRipple(element, 'touchend', () => {\r\n        setTimeout(() => {\r\n          isTouching = false;\r\n        }, 100);\r\n      }, e.touches[0].clientX, e.touches[0].clientY);\r\n    });\r\n  }\r\n\r\n  createRipple(rippleContainer: Element, releaseEventName: string, releaseCallback: Function, pageX: number, pageY: number) {\r\n    if (this.disabled) return;\r\n\r\n    const rippleWrapper = document.createElement('DIV');\r\n    rippleWrapper.classList.add('ripple-wrapper');\r\n\r\n    const ripple = document.createElement('DIV');\r\n    ripple.classList.add('ripple');\r\n    rippleWrapper.appendChild(ripple);\r\n    rippleContainer.insertAdjacentElement('afterbegin', rippleWrapper);\r\n\r\n    if (this._config.size) {\r\n      Ripple._setElementSquareSizeAndCenter(rippleWrapper, this._config.size);\r\n    }\r\n\r\n    if (this._config.borderRadius) {\r\n      rippleWrapper.style.borderRadius = this._config.borderRadius;\r\n    }\r\n\r\n    const release = function () {\r\n      ripple.classList.add('dismiss');\r\n\r\n      if (releaseCallback) {\r\n        releaseCallback();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(releaseEventName, release);\r\n    rippleContainer.addEventListener(\"dragover\", release);\r\n\r\n    ripple.addEventListener('transitionend', () => {\r\n      if (ripple.classList.contains('dismiss')) {\r\n        rippleContainer.removeChild(rippleWrapper);\r\n        rippleContainer.removeEventListener(\"dragover\", release);\r\n        window.removeEventListener(releaseEventName, release)\r\n      }\r\n    });\r\n\r\n    requestAnimationFrame(() => {\r\n      const clientRect = rippleContainer.getBoundingClientRect();\r\n      const largestDimensionSize = Math.max(rippleWrapper.clientWidth, rippleWrapper.clientHeight);\r\n      let rippleSize = this._config.size || largestDimensionSize * 2;\r\n      Ripple._setElementSquareSizeAndCenter(ripple, rippleSize);\r\n      ripple.style.transitionDuration = (1080 * Math.pow(rippleSize, 0.3)) + 'ms, 750ms';\r\n\r\n      const x = (pageX - clientRect.left) + ((rippleSize - rippleContainer.clientWidth) / 2);\r\n      const y = (pageY - clientRect.top) + ((rippleSize - rippleContainer.clientHeight) / 2);\r\n\r\n      ripple.style.transformOrigin = x + \"px \" + y + \"px\";\r\n      ripple.classList.add('show');\r\n    });\r\n  }\r\n\r\n  private static _setElementSquareSizeAndCenter(element: HTMLElement, size: number) {\r\n    element.style.top = \"50%\";\r\n    element.style.left = \"50%\";\r\n    element.style.width = size + 'px';\r\n    element.style.height = size + 'px';\r\n    element.style.marginLeft = -size / 2 + 'px';\r\n    element.style.marginTop = -size / 2 + 'px';\r\n  }\r\n\r\n  private static _initilizeRipples(selector: string, config?: RippleConfig) {\r\n    const rippleContainers = document.querySelectorAll(selector);\r\n\r\n    for (let i = 0; i < rippleContainers.length; i++) {\r\n      new Ripple(rippleContainers[i] as HTMLElement, config);\r\n    }\r\n  }\r\n\r\n  static initializeRipples(): void {\r\n    Ripple._initilizeRipples(RippleContainersSelector);\r\n\r\n    for (let i = 0; i < RippleConfigMap.length; i++) {\r\n      let rippleConfig = RippleConfigMap[i];\r\n\r\n      let selector = rippleConfig.selector;\r\n\r\n      if (rippleConfig.subSelector) {\r\n        selector = [selector, rippleConfig.subSelector].join(' ');\r\n      }\r\n\r\n      Ripple._initilizeRipples(selector, rippleConfig.config);\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nexport class Snackbar {\r\n  private static readonly _animationEvents = [\"webkitAnimationEnd\", \"oanimationend\", \"msAnimationEnd\", \"animationend\"];\r\n  private static _snackbarQueue: SnackbarDefinition[] = [];\r\n  private static _consuming: boolean;\r\n\r\n  static show(text: string, duration: SnackbarDuration = SnackbarDuration.long, buttonDefinition?: SnackbarButtonDefinition) {\r\n    Snackbar._snackbarQueue.push({\r\n      text: text,\r\n      duration: duration,\r\n      buttonDefinition: buttonDefinition\r\n    });\r\n\r\n    if (!Snackbar._consuming) {\r\n      Snackbar.consumeQueue();\r\n    }\r\n  }\r\n\r\n  private static consumeQueue() {\r\n\r\n    if (Snackbar._snackbarQueue.length) {\r\n      Snackbar._consuming = true;\r\n      Snackbar.showNext();\r\n    }\r\n  }\r\n\r\n  private static showNext() {\r\n    if (Snackbar._snackbarQueue.length) {\r\n      const snackbarDefinition = Snackbar._snackbarQueue[0];\r\n\r\n      Snackbar._snackbarQueue = Snackbar._snackbarQueue.slice(1);\r\n\r\n      const snackbar = Snackbar.createSnackbar();\r\n\r\n      snackbar.appendChild(Snackbar.createSnackbarText(snackbarDefinition.text));\r\n\r\n      if (snackbarDefinition.buttonDefinition) {\r\n        const snackbarButton = Snackbar.createButton(snackbarDefinition.buttonDefinition);\r\n        snackbar.appendChild(snackbarButton);\r\n      }\r\n\r\n      document.body.appendChild(snackbar);\r\n\r\n      setTimeout(() => {\r\n        snackbar.classList.add(\"dismiss\");\r\n        Snackbar.addAnimationEndEvents(snackbar);\r\n\r\n      }, snackbarDefinition.duration);\r\n    } else {\r\n      Snackbar._consuming = false;\r\n    }\r\n  }\r\n\r\n  private static createSnackbar(): HTMLElement {\r\n    const snackbar = document.createElement(\"div\");\r\n    snackbar.className = \"snackbar\";\r\n\r\n    return snackbar;\r\n  }\r\n\r\n  private static createSnackbarText(text: string): HTMLElement {\r\n    const snackbarText = document.createElement(\"div\");\r\n    snackbarText.innerText = text;\r\n    snackbarText.className = \"snackbar-text\";\r\n\r\n    return snackbarText;\r\n  }\r\n\r\n  private static createButton(buttonDefinition: SnackbarButtonDefinition): HTMLElement {\r\n\r\n    const snackbarButton = document.createElement(\"button\") as HTMLButtonElement;\r\n    snackbarButton.type = \"button\";\r\n    snackbarButton.className = \"btn-flat btn-secondary\";\r\n    snackbarButton.innerText = buttonDefinition.text;\r\n\r\n    new Ripple(snackbarButton);\r\n\r\n    if (buttonDefinition.action) {\r\n      snackbarButton.addEventListener(\"click\", buttonDefinition.action);\r\n    }\r\n\r\n    return snackbarButton;\r\n  }\r\n\r\n  private static addAnimationEndEvents(snackbar: HTMLElement) {\r\n    Snackbar._animationEvents.forEach(eventName => {\r\n      snackbar.addEventListener(eventName, Snackbar.onAnimationEnd.bind(this));\r\n    });\r\n  }\r\n\r\n  private static onAnimationEnd(event: Event) {\r\n    event.currentTarget.removeEventListener(event.type, Snackbar.onAnimationEnd);\r\n    const element = event.currentTarget as HTMLElement;\r\n\r\n    element.parentNode.removeChild(element);\r\n    Snackbar.showNext();\r\n  }\r\n}\r\n\r\nexport enum SnackbarDuration {\r\n  short = 2500,\r\n  long = 5000\r\n}\r\n\r\nexport class SnackbarDefinition {\r\n  text: string;\r\n  duration: SnackbarDuration;\r\n  buttonDefinition: SnackbarButtonDefinition;\r\n}\r\n\r\nexport class SnackbarButtonDefinition {\r\n  text: string;\r\n  action: EventListener;\r\n}\r\n","export class TextField {\r\n\r\n  element: Element;\r\n  input: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n  constructor(element: Element) {\r\n    const input = element.querySelector('input, textarea, .text-input') as HTMLInputElement | HTMLTextAreaElement;\r\n\r\n    if (input) {\r\n      input.addEventListener('focus', () => {\r\n        element.classList.add('focus');\r\n      });\r\n\r\n      input.addEventListener('blur', () => {\r\n        element.classList.remove('focus');\r\n      });\r\n\r\n\r\n      this.element = element;\r\n\r\n      let prototype;\r\n\r\n      if (input.nodeName.toLowerCase() === 'input') {\r\n        prototype = HTMLInputElement.prototype;\r\n      } else if (input.nodeName.toLowerCase() === 'textarea') {\r\n        prototype = HTMLTextAreaElement.prototype;\r\n      }\r\n\r\n      if (!prototype) return;\r\n\r\n      input.addEventListener('input', () => {\r\n        this.setEmpty();\r\n      });\r\n\r\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, 'value');\r\n      const inputSetter = descriptor.set;\r\n      descriptor.set = (val) => {\r\n\r\n        //changing to native setter to prevent the loop while setting the value\r\n        Object.defineProperty(input, \"value\", {set:inputSetter});\r\n        input.value = val;\r\n\r\n        this.setEmpty();\r\n\r\n        //changing back to custom setter\r\n        Object.defineProperty(input, \"value\", descriptor);\r\n      };\r\n\r\n      Object.defineProperty(input, \"value\", descriptor);\r\n\r\n      this.input = input;\r\n\r\n      this.setEmpty();\r\n    }\r\n  }\r\n\r\n  setEmpty() {\r\n    if (this.input.value) {\r\n      this.element.classList.remove('empty')\r\n    } else {\r\n      this.element.classList.add('empty')\r\n    }\r\n  }\r\n\r\n  static initializeTextFields(): void {\r\n    const textFields = document.querySelectorAll('.text-field');\r\n    for (let i = 0; i < textFields.length; i++) {\r\n      const textField = textFields[i];\r\n      new TextField(textField);\r\n    }\r\n  }\r\n}\r\n"]}